@inherits BasePage
<MudNavMenu >
    <MudNavLink class="nav-link" Href="/SeriesViewer" Icon="@Icons.Material.Filled.Ballot">Series View</MudNavLink>
    <MudNavLink class="nav-link" OnClick="NavigateToBreadCrumb" Icon="@Icons.Material.Filled.Folder">Category View</MudNavLink>
    <MudNavLink class="nav-link" Href="/DatabaseMaintenance" Icon="@Icons.Material.Filled.Save">Database Maintenance</MudNavLink>
    <MudNavLink class="nav-link" Href="/AboutObserver" Icon="@Icons.Material.Filled.QuestionMark">About Observer</MudNavLink>
</MudNavMenu>

    
@code {

    private ActiveMenu _ActiveMenu;
    protected ActiveMenu ActiveMenu 
    {
        get => _ActiveMenu;
        set
        {
            if(_ActiveMenu != value)
            {
                _ActiveMenu = value;
                //StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // NavigationManager.LocationChanged += LocationChanged;
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string loc = e.Location.Split('/').Last();
        ActiveMenu lastValue = ActiveMenu;
        ActiveMenu = loc switch
        {

            "databaseMaintenance" => ActiveMenu.Database,
            "verifyDatabase" => ActiveMenu.Database,
            "createDatabase" => ActiveMenu.Database,
            "deleteDatabase" => ActiveMenu.Database,
            _ => ActiveMenu.Main
        };
    }

    private async Task NavigateToBreadCrumb()
    {
        ViewState v = AppState.GetViewState(View.Category);
        LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node node = v.BreadCrumbs?.LastOrDefault();
        NavigationManager.NavigateTo($"/CategoryViewer/{node?.EntityID ?? "0"}", true);
    }
}

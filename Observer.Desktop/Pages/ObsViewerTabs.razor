@page "/obsViewerTabs/{symbol}/{title}/{caller}"
@inherits BasePage
    <MudPaper Outlined="true" Class="d-flex mt-5 mb-5 pa-3 justify-space-around align-center">
       
        <MudLink Href="@(callbackPage)">
            <ChildContent>
                <MudButton StartIcon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Filled" Color="Color.Default" Style="text-transform:none">@callbackCaption</MudButton>
            </ChildContent>
        </MudLink>

        <div class="d-flex flex-column justify-center align-center">
            <h2>@symbol</h2>
            <h4>@title</h4>
        </div>
        <div class="d-flex justify-content-center align-content-center">
            <MudRadioGroup @bind-SelectedOption="@showDenseObs" Class="d-flex justify-content-center align-content-center">
                <MudRadio Option="@(true)">Dense</MudRadio>
                <MudRadio Option="@(false)">Sparse</MudRadio>
            </MudRadioGroup>
        </div>
    </MudPaper>
    <MudTabs Elevation="1" Rounded="true" PanelClass="pa-6" KeepPanelsAlive="false" >

        <MudTabPanel Text="Properties" ToolTip="Series metadata">
            <SeriesProperties @bind-series="series" />
        </MudTabPanel>

        <MudTabPanel Text="Chart" ToolTip="Chart of observation values" >
            <ObsChart @bind-obs="denseObs" @bind-series="series" />  @* Bind to denseObs only *@
        </MudTabPanel>

        <MudTabPanel Text="List" ToolTip="Observations in list format" >
            <ObsList @bind-obs="obs" @bind-series="series" />
        </MudTabPanel>

        <MudTabPanel Text="Pivot Table" ToolTip="Observations as a configurable matrix">
            <ObsPivotTable @bind-obs="obs" @bind-series="series" />
        </MudTabPanel>

        <MudTabPanel Text="Statistics" ToolTip="Summary information">
            <SeriesStats @bind-series="series" />
        </MudTabPanel>

        <MudTabPanel Text="Export" ToolTip="Export data">
            <ExportData @bind-obs="obs" @bind-series="series" />
        </MudTabPanel>
    </MudTabs>


@code {

    [Parameter] public string symbol { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string caller { get; set; }
    [Inject] IContainer container { get; set; }
    private VintageComposerService composerService;
    private bool _showDenseObs;
    private bool showDenseObs
    {
        get => _showDenseObs;
        set
        {
            if (_showDenseObs != value)
            {
                _showDenseObs = value;
                obsChanged.InvokeAsync();
            }
        }
    }


    private IEnumerable<FredObservation> obs
    { 
        get => showDenseObs ? denseObs : sparseObs;
        set { var dummy = value; }
    }


    private IEnumerable<FredObservation> _denseObs { get; set; }
    private IEnumerable<FredObservation> denseObs
    {
        get
        {
            if (_denseObs is null && (sparseObs?.Any() ?? false))
            {
                _denseObs = composerService.MakeDense(sparseObs.ToList<IFredObservation>()).Cast<FredObservation>().ToList();
            }
            return _denseObs;
        }
        set { var dummy = value; }
    }

    private IEnumerable<FredObservation> _sparseObs { get; set; }
    private IEnumerable<FredObservation> sparseObs
    {
        get => _sparseObs;
        set
        {
            if (_sparseObs != value)
            {
                _sparseObs = value;
                _denseObs = null;
                sparseObsChanged.InvokeAsync();
                denseObsChanged.InvokeAsync();
                obsChanged.InvokeAsync();
            }
        }
    }
    public EventCallback<IEnumerable<FredObservation>> sparseObsChanged { get; set; }
    public EventCallback<IEnumerable<FredObservation>> denseObsChanged { get; set; }
    public EventCallback<IEnumerable<FredObservation>> obsChanged { get; set; }
    private FredSeries series { get; set; }
    private string callbackPage => caller == "C" ? $"/CategoryViewer/{AppState.GetViewState(View.Category).BreadCrumbs.Last().EntityID}" : "/SeriesViewer";
    private string callbackCaption => caller == "C" ? "Categories" : "Series"; 

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        composerService = container.Resolve<VintageComposerService>();
        sparseObs = (await serviceClient.CallAsync(x => x.ObservationsService.GetLocalObservations(new string[] { symbol }))).Item;
        await GetLocalSeries();
    }

    private async Task GetLocalSeries()
    {
        series = (await serviceClient.CallAsync(x => x.SeriesService.GetLocalSeries(symbol))).FirstOrDefault();
    }
}

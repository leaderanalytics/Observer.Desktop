@page "/CategoryViewer/{parentID}"
@inherits SeriesViewBasePage
@using Downloader = LeaderAnalytics.Vyntix.Fred.Domain.Downloader;
<MudPaper Outlined="true" Class="d-flex mt-5 mb-5 pa-3 ">
    <div class="d-flex flex-row gap-1 justify-start align-center flex-grow-1" style="overflow:auto;white-space:nowrap;">
        @{
            ViewState v = AppState.GetViewState(View.Category);
            foreach (LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node n in v.BreadCrumbs)
            {
                
                <MudLink Class="d-flex" OnClick="@(() => PopBreadCrumb(n))">@n.EntityName</MudLink>
                <MudText Class="d-flex">/</MudText>
            }
        }
    </div>
    <div class="d-flex flex-grow-0 gap-8">
        <MudIconButton Title="Refresh" Size="Size.Large" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" @onclick="RefreshClickHandler" Class="d-flex align-end" />
        <MudIconButton Title="Download Series, Observations and related data" Size="Size.Large" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" @onclick="DownloadClickHandler" Class="d-flex"></MudIconButton>
    </div>
</MudPaper>

<MudTable ServerData="@(new Func<TableState, Task<TableData<Downloader.Node>>>(LoadNodes))"
          AllowUnsorted="false" Dense="true" Hover="true" MultiSelection="false" @ref="seriesTable" FixedHeader="true" Height="calc(100vh - 300px)" RowsPerPage="viewState.Take" CurrentPage="viewState.Page">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Local Series Categories</MudText>
        <MudSpacer />
        <MudTextField T="string" Placeholder="Symbol Search" @bind-Value="searchSymbol"></MudTextField>
        <MudSpacer />
        <MudTextField T="string" Placeholder="Title Search" @bind-Value="searchTitle"></MudTextField>
        <MudSpacer />
        <MudButton Title="Search symbol or series title" IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" @onclick="SearchClickHandler" Style="height:42px;width:42px;"></MudButton>
        <MudButton Title="Clear search criteria" Size="Size.Large" StartIcon="@Icons.Material.Filled.SearchOff" Variant="Variant.Filled" OnClick="ClearSearchClickHandler" Class="ml-2" Style="height:42px;width:42px;"></MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortDirectionChanged="@((x) => seriesTable.CurrentPage = 0)" SortLabel="@(nameof(Downloader.Node.EntityName))" InitialDirection="(viewState.SortExpression == nameof(Downloader.Node.EntityName) || string.IsNullOrEmpty(viewState.SortExpression))? viewState.SortAscending ? SortDirection.Ascending : SortDirection.Descending : SortDirection.None" T="Downloader.Node">Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Entity Type" Style="width:60px;">
            @if (context.EntityType == "C")
            {
                <MudIcon Icon="@Icons.Material.Filled.Folder"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Ballot"></MudIcon>
            }
        </MudTd>
        <MudTd DataLabel="Name">
            @if (context.EntityType == "C")
            {
   
                <MudLink OnClick="@(() => PushBreadCrumb(context))" >@context.EntityName</MudLink>
                
            }
            else
            {
                <MudLink Href="@($"obsViewerTabs/{context.EntityID}/{HttpUtility.UrlEncode(context.EntityName)}/C")">@context.SeriesName</MudLink>
                <MudLink Class="ml-1" OnClick="(() => CopyToClipboard(context.EntityID))"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy"></MudIcon></MudLink>
            }
            
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 50, 100, 200, 500, int.MaxValue }" InfoFormat="@($"{pagerFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public string? parentID { get; set; } // "0" if root
    private MudTable<LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node> seriesTable;
    private string searchSymbol;
    private string searchTitle;
    private ViewState viewState;
    [Inject] public ILogger<CategoryViewer> logger { get => base.logger as ILogger<CategoryViewer>; set { base.logger = value as ILogger<SeriesViewBasePage>; } }
    internal DownloadQueueManager downloadQueueManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        viewState = AppState.GetViewState(View.Category);

        if (parentID == "0" && (!viewState.BreadCrumbs.Any()))
            viewState.BreadCrumbs.Add(new Downloader.Node(new FredCategory { Name = "Root", NativeID = "0" }, "0"));

        ILifetimeScope scope = container.BeginLifetimeScope();
        downloadQueueManager = scope.Resolve<DownloadQueueManager>();
    }

    private async Task DownloadClickHandler()
    {
        ViewState v = AppState.GetViewState(View.Category);
        string catName = v.BreadCrumbs.Last().EntityName;

        DialogOptions options = new DialogOptions { DisableBackdropClick = true, MaxWidth = MaxWidth.Large };
        var result = await DialogService.Show<CategoryPathDownloadDialog>($"Select related data objects to download for category: {catName}", options).Result;

        if (!result.Cancelled)
        {
            FredDownloadArgs args = result.Data as FredDownloadArgs;
            args.CategoryID = parentID;

            logger.LogInformation("Category path download started.  Args are: {@args}", args);
            downloadQueueManager.QueueDownload(args);
            StateHasChanged();
            logger.LogInformation("Category path download completed.");
        }
    }

    private void SearchClickHandler()
    {
        seriesTable.CurrentPage = 0;
        seriesTable.ReloadServerData();
    }

    private void ClearSearchClickHandler()
    {
        searchTitle = searchSymbol = null;
        seriesTable.CurrentPage = 0;
        seriesTable.ReloadServerData();
    }

    protected async Task RefreshClickHandler() => await seriesTable.ReloadServerData();

    private async Task<TableData<LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node>> LoadNodes(TableState tableState)
    {
        await MessageBox.ShowLoading();
        viewState.SortExpression = tableState.SortLabel;
        viewState.SortAscending = tableState.SortDirection != SortDirection.Descending;
        viewState.Page = tableState.Page;
        viewState.Take = tableState.PageSize;
        viewState.SearchTitle = searchTitle;
        viewState.SearchSymbol = searchSymbol;
        IEnumerable<Downloader.Node> series = await serviceClient.CallAsync(x => x.CategoriesService.GetCategoryNodes(parentID,viewState.SortAscending, viewState.SearchTitle, viewState.SearchSymbol, viewState.Skip, viewState.Take));
        await MessageBox.HideLoading();
        return new TableData<Downloader.Node> { TotalItems = int.MaxValue, Items = series };
    }

    private async Task PushBreadCrumb(LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node node)
    {
        viewState.BreadCrumbs.Add(node);
        NavigationManager.NavigateTo($"/CategoryViewer/{node.EntityID}");
    }

    protected override async Task OnParametersSetAsync() => seriesTable?.ReloadServerData();



    private async Task PopBreadCrumb(LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node node)
    {
        LeaderAnalytics.Vyntix.Fred.Domain.Downloader.Node breadCrumb = viewState.BreadCrumbs.First(x => x.EntityType == "C" && x.EntityID == node.EntityID);
        int index = viewState.BreadCrumbs.IndexOf(breadCrumb);
        viewState.BreadCrumbs = viewState.BreadCrumbs.Take(index + 1).ToList();
        viewState.Page = 0;
        NavigationManager.NavigateTo($"/CategoryViewer/{node.EntityID}");
    }
}

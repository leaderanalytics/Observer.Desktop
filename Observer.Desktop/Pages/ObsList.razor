@inherits BasePage
<h3>@symbol Observations</h3>
<div style="height:calc(100vh - 350px); display:grid; grid-template-rows: minmax(0,1fr)">
<MudTable ServerData="@(new Func<TableState, Task<TableData<Observation>>>(LoadObservations))" @ref="obsTable"  Dense="true" Hover="true" FixedHeader="true" Height="100%" RowsPerPage="100">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="obsdate_field" T="Observation">Obs Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="vintage_date_field" T="Observation">Vintage Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="value_field" Style="width:120px" T="Observation">Value</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Obs Date">@context.ObsDate.ToString("MM/dd/yyyy")</MudTd>
        <MudTd DataLabel="Vintage Date">@context.VintageDate.ToString("MM/dd/yyyy")</MudTd>
        <MudTd DataLabel="Value" Style="text-align:end;width:120px">@context.Value</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 50, 100, 200, 500, int.MaxValue }" InfoFormat="@($"{pagerFormat}")" HorizontalAlignment="HorizontalAlignment.Right"  />
    </PagerContent>
</MudTable>
</div>
@code {

    [Parameter] public string symbol { get; set; }
    [Parameter] public EventCallback<string> symbolChanged { get; set; }
    private IEnumerable<Observation> _obs;
    [Parameter] public IEnumerable<Observation> obs 
    {
        get => _obs;
        set
        {
            if (_obs != value)
            {
                _obs = value;
                obsTable?.ReloadServerData();  // When navigating away than back to this page obsTable is null but the table still renders correctly.  IDK why.
            }
        }
    }
    [Parameter] public EventCallback<IEnumerable<Observation>> obsChanged { get; set; }
    private MudTable<Observation> obsTable;

    private async Task<TableData<Observation>> LoadObservations(TableState tableState)
    {
        if (obs is null)
            return new TableData<Observation>();

        IEnumerable<Observation> page = obs.Skip(tableState.PageSize * tableState.Page).Take(tableState.PageSize);

        return new TableData<Observation> { TotalItems = obs.Count(), Items = page };
    }
}

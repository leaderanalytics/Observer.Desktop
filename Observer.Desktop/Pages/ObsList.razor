@inherits BasePage

<div style="height:calc(100vh - 350px); display:grid; grid-template-rows: minmax(0,1fr)">
    <MudTable ServerData="@(new Func<TableState, Task<TableData<FredObservation>>>(LoadObservations))" @ref="obsTable" Dense="true" Hover="true" FixedHeader="true" Height="100%" RowsPerPage="100">
    <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="@(nameof(FredObservation.ObsDate))" T="FredObservation">Obs Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="@(nameof(FredObservation.VintageDate))" T="FredObservation">Vintage Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="value_field" Style="width:120px" T="FredObservation">Value</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Obs Date">@context.ObsDate.ToString(Constants.DateFormat)</MudTd>
        <MudTd DataLabel="Vintage Date">@context.VintageDate.ToString(Constants.DateFormat)</MudTd>
        <MudTd DataLabel="Value" Style="text-align:end;width:120px">@context.Value</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 50, 100, 200, 500, int.MaxValue }" InfoFormat="@($"{pagerFormat}")" HorizontalAlignment="HorizontalAlignment.Right"  />
    </PagerContent>
</MudTable>
</div>
@code {

    [Parameter] public string symbol { get; set; }
    [Parameter] public EventCallback<string> symbolChanged { get; set; }
    private IEnumerable<FredObservation> _obs;
    [Parameter] public IEnumerable<FredObservation> obs 
    {
        get => _obs;
        set
        {
            if (_obs != value)
            {
                _obs = value;
                obsTable?.ReloadServerData();  // When navigating away than back to this page obsTable is null but the table still renders correctly.  IDK why.
            }
        }
    }
    [Parameter] public EventCallback<IEnumerable<FredObservation>> obsChanged { get; set; }
    private MudTable<FredObservation> obsTable;

    private async Task<TableData<FredObservation>> LoadObservations(TableState tableState)
    {
        if (obs is null)
            return new TableData<FredObservation>();

        IEnumerable<FredObservation> page = obs;

        if (tableState.SortDirection != SortDirection.Descending)
        {
            page = tableState.SortLabel switch
            {
                nameof(FredObservation.VintageDate) => page.OrderBy(x => x.VintageDate).ThenBy(x => x.ObsDate),
                nameof(FredObservation.Value) => page.OrderBy(x => x.Value),
                _ => page.OrderBy(x => x.ObsDate).ThenBy(x => x.VintageDate)
            };
        }
        else
        {
            page = tableState.SortLabel switch
            {
                nameof(FredObservation.VintageDate) => page.OrderByDescending(x => x.VintageDate).ThenByDescending(x => x.ObsDate),
                nameof(FredObservation.Value) => page.OrderByDescending(x => x.Value),
                _ => page.OrderByDescending(x => x.ObsDate).ThenByDescending(x => x.VintageDate)
            };
        }

        page = page.Skip(tableState.PageSize * tableState.Page).Take(tableState.PageSize);

        return new TableData<FredObservation> { TotalItems = obs.Count(), Items = page };
    }
}

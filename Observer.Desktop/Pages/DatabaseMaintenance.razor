@page "/databaseMaintenance"
@using LeaderAnalytics.AdaptiveClient.EntityFrameworkCore;

<MudPaper Class="m-3">
    
    <MudPaper Class="d-flex mt-5 mb-5 pa-3 justify-space-around">
        <MudButton Variant="Variant.Filled" @onclick="CreateDbClickHandler" Class="d-flex" Style="text-transform:none">Create or Update Database</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="VerifyDbClickHandler" Class="d-flex" Style="text-transform:none">Verify Database</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="DeleteDbClickHandler" Disabled="! dbExists" Class="d-flex" Style="text-transform:none">Delete Database</MudButton>
    </MudPaper>

    
</MudPaper>
<MudPaper Class="d-flex flex-column ma-10 pa-3 justify-space-around">
    <MudGrid Class="mt-5 m-lg-5 mr-5">
        <MudItem xs="3">
            <MudText Align="Align.Left">Database Status:</MudText>
        </MudItem>
        <MudItem xs="9">
            <MudText Align="Align.Left">@dbStatus</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudText Align="Align.Left">Connection String:</MudText>
            </MudItem>
            <MudItem xs="9">
                <MudText Align="Align.Left">@endPoint.ConnectionString</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>


@code {
    private bool dbExists;
    private string dbStatus { get; set; } = "Checking...";
    [Inject] IMessageBox MessageBox { get; set; }
    [Inject] IContainer container { get; set; }


    // Cant inject these properties directly because they are registered with Autofac.  See Program.cs.
    private IDatabaseUtilities dbUtilities { get; set; }  
    private IEndPointConfiguration endPoint { get; set; }
    private IAdaptiveClient<IAPI_Manifest> serviceClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ILifetimeScope scope = container.BeginLifetimeScope();
        dbUtilities = scope.Resolve<IDatabaseUtilities>();
        endPoint = scope.Resolve<IEndPointConfiguration>();
        serviceClient = scope.Resolve<IAdaptiveClient<IAPI_Manifest>>();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
            await VerifyDbClickHandler();
    }

    private async Task VerifyDbClickHandler() 
    {
        await MessageBox.ShowLoading();
        DatabaseStatus status = DatabaseStatus.DoesNotExist;
        string errorMsg = null;

        try
        {
            status = await dbUtilities.GetDatabaseStatus(endPoint);
        }
        catch (Exception ex)
        {
            errorMsg = $"An error occured while attemping to verify the status of the database.  The error message is {ex.ToString()}  Make sure your database server / service is running.  Check your connection string carefully, then use the Create Database button to create the database.";
        }
        finally
        {
            dbStatus = status switch
            {
                DatabaseStatus.ConsistentWithModel => "Database schema is up to date.",
                DatabaseStatus.Unknown => errorMsg,
                DatabaseStatus.NotConsistentWithModel => "Database schema needs to be updated.  Use the Create / Update databse option to update it.",
                DatabaseStatus.DoesNotExist => "Database does not exist.  Use the Create / Update databse option to create it."  ,
                _ => throw new Exception($"Unknown response from GetDatabaseStatus: {status.ToString()}.")
            };

            await MessageBox.HideLoading();
            StateHasChanged();
        }


        dbExists = (status == DatabaseStatus.ConsistentWithModel || status == DatabaseStatus.NotConsistentWithModel);
    }

    private async Task CreateDbClickHandler()
    {
        await MessageBox.ShowLoading();
        try
        {
            DatabaseValidationResult result = await dbUtilities.CreateOrUpdateDatabase(endPoint);

            if ((!result.DatabaseWasCreated) && (!result.AppliedMigrations.Any()))
                dbStatus = "Database exists and schema is current.  No changes were made.";
            else if (result.DatabaseWasCreated)
                dbStatus = "Database was created successfully. ";

            if (result.AppliedMigrations.Any())
                dbStatus = dbStatus + "The following updates were applied: " + string.Join(", ", result.AppliedMigrations);

            dbExists = true;
            // The endpoint was marked as non-functional because the db did not exist.  Make another call using Try to marke it as alive.
            IEnumerable<FredSeries> series = await serviceClient.TryAsync(x => x.SeriesService.GetLocalSeries(), endPoint.Name);
        }
        catch (Exception ex)
        {
            dbStatus = $"An error occured while attempting to update the database.  The error is: {ex.ToString()}";

        }
        finally
        {
            await MessageBox.HideLoading();
        }
    }

    private async Task DeleteDbClickHandler()
    {
        bool ok = await MessageBox.Confirm("WARNING: Deleting the database cannot be undone." 
        + Environment.NewLine 
        + "All data will be deleted including data you have input or modified manually."
        + Environment.NewLine
        + "Are you sure you want to continue?"
        + Environment.NewLine
        + "Click OK to delete the database or Cancel to leave the database unchanged."
        );

        if (!ok)
            return;

        try
        {
            await dbUtilities.DropDatabase(endPoint);
            dbStatus = "Database was dropped successfully. ";
            dbExists = false;
        }
        catch (Exception ex)
        {
            dbStatus = $"An error occured while attempting to drop the database.  The error is: {ex.ToString()}";
        }


    }
}

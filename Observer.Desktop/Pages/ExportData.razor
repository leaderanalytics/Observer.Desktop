@inherits BasePage
<MudContainer Style="min-width:600px;">
    <MudPaper Class="pa-10 d-flex flex-column gap-5" >

        <table >

            <tr>
                <td>

                    <MudText>Vintages:</MudText>
                </td>
                <td>
                    <div Class="d-flex flex-row  align-center gap-8">

                        @if (series is not null)
                        {
                            <MudCheckBox T="bool" Style="margin-left:-10px;" Checked="args.InitialReleaseOnly" CheckedChanged="InitialReleaseOnlyChanged" @ref="initialReleaseCheckBox" Disabled="@(!(series.HasVintages.HasValue && series.HasVintages.Value))">Initial Vintage only</MudCheckBox>
                        }

                        <MudSelect Style="border-top:whitesmoke .5px solid" T="DateTime" Label="Vintages" MultiSelection="true" @bind-SelectedValues="selectedVintageDates" SelectAll="true" SelectAllText="All Vintages" Disabled="@isdisabled">
                            @foreach (var vintageDate in vintageDates ?? Enumerable.Empty<DateTime>())
                            {
                                <MudSelectItem T="DateTime" Value="@vintageDate">@vintageDate.ToString(Constants.DateFormat)</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </td>
            </tr>

            <tr>
                <td>
                    <MudText Style="width:30vw">Layout:</MudText>
                </td>
                <td>
                    <MudRadioGroup @bind-SelectedOption="@args.DataLayout" Disabled="@isdisabled" Class="d-flex justify-content-center align-content-center">
                        <MudRadio Option="@(DataLayout.List)">List</MudRadio>
                        <MudRadio Option="@(DataLayout.Matrix)">Matrix</MudRadio>
                    </MudRadioGroup>
                </td>
            </tr>
            <tr>
                <td>
                    <MudText Style="width:30vw">File Format:</MudText>
                </td>
                <td>
                    <MudRadioGroup @bind-SelectedOption="@args.FileFormat" Class="d-flex justify-content-center align-content-center">
                        <MudRadio Option="@(FileFormat.Excel)">Excel</MudRadio>
                        <MudRadio Option="@(FileFormat.CSV)">CSV</MudRadio>
                    </MudRadioGroup>
                </td>
            </tr>
            <tr>
                <td>
                    <MudText Style="width:30vw">Sort Priority:</MudText>
                </td>
                <td>
                    <MudRadioGroup @bind-SelectedOption="@args.SortPriority" Class="d-flex justify-content-center align-content-center">
                        <MudRadio Option="@(SortPriority.ObservationDate)">Observation date, Vintage date</MudRadio>
                        <MudRadio Option="@(SortPriority.VintageDate)">Vintage date, Observation date</MudRadio>
                    </MudRadioGroup>
                </td>
            </tr>
            <tr>
                <td>
                    <MudText Style="width:30vw">Observation sort direction:</MudText>
                </td>
                <td>
                    <MudRadioGroup @bind-SelectedOption="@args.ObsSortDirection" Class="d-flex justify-content-center align-content-center">
                        <MudRadio Option="@(LeaderAnalytics.Vyntix.FileExporters.SortDirection.Ascending)">Ascending</MudRadio>
                        <MudRadio Option="@(LeaderAnalytics.Vyntix.FileExporters.SortDirection.Descending)">Descending</MudRadio>
                    </MudRadioGroup>
                </td>
            </tr>
            <tr>
                <td>
                    <MudText Style="width:30vw">Vintage sort direction:</MudText>
                </td>
                <td>
                    <MudRadioGroup @bind-SelectedOption="@args.VintSortDirection" Class="d-flex justify-content-center align-content-center">
                        <MudRadio Option="@(LeaderAnalytics.Vyntix.FileExporters.SortDirection.Ascending)">Ascending</MudRadio>
                        <MudRadio Option="@(LeaderAnalytics.Vyntix.FileExporters.SortDirection.Descending)">Descending</MudRadio>
                    </MudRadioGroup>
                </td>
            </tr>
            <tr>
                <td colspan="2" style="text-align:center;">
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportClickHandler"
                               Color="Color.Default" Style="text-transform:none;width:150px;margin-top:20px;">
                        Export Data
                    </MudButton>
                </td>
            </tr>
        </table>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public FredSeries series { get; set; }
    [Parameter] public EventCallback<FredSeries> seriesChanged { get; set; }
    [Parameter] public IEnumerable<FredObservation> obs { get; set; }
    [Parameter] public EventCallback<IEnumerable<FredObservation>> obsChanged { get; set; }
    private FileExportArgs args { get; set; }
    private IEnumerable<DateTime> selectedVintageDates { get; set; }
    private List<DateTime> vintageDates { get; set; }
    private MudCheckBox<bool> initialReleaseCheckBox { get; set; }
    private bool isdisabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        isdisabled = !(series.HasVintages.HasValue && series.HasVintages.Value);

        if (!isdisabled)
            vintageDates = obs?.Select(x => x.VintageDate).Distinct().OrderByDescending(x => x).ToList() ?? new List<DateTime>();

        args = new()
            {

                DataLayout = AppState.UserSettings.ExportSettings.DataLayout,
                FileFormat = AppState.UserSettings.ExportSettings.FileFormat ,
                SortPriority = AppState.UserSettings.ExportSettings.SortPriority,
                ObsSortDirection = AppState.UserSettings.ExportSettings.ObsSortDirection,
                VintSortDirection = AppState.UserSettings.ExportSettings.VintSortDirection,
                InitialReleaseOnly = isdisabled
            };
        selectedVintageDates = new HashSet<DateTime>();

    }

    private async Task InitialReleaseOnlyChanged()
    {
        args.InitialReleaseOnly = isdisabled = initialReleaseCheckBox.Checked;
    }

    private async Task ExportClickHandler()
    {
        if (!args.InitialReleaseOnly && !(selectedVintageDates?.Any() ?? false))
        {
            await MessageBox.Error("Select at least one vintage.");
            return;
        }
        List<Vintage> vintages = new();
        var groups = obs.Where(x => args.InitialReleaseOnly || selectedVintageDates.Contains(x.VintageDate)).GroupBy(x => x.VintageDate);

        foreach (var grp in groups)
        {
            Vintage v = new Vintage { VintageDate = grp.Key, NativeID = series.Symbol, Observations = new List<Observation>(grp.Count()) };

            foreach (FredObservation fo in grp)
                v.Observations.Add(new Observation { ObsDate = fo.ObsDate, Close = Convert.ToDecimal(fo.Value), Vintage = v });

            vintages.Add(v);
        }


        IFileExporter exporter = new FileExporter();
        string fileName = $"{series.Symbol}_{DateTime.Now.ToString("yyyy-MM-dd-hh-mm-ss")}.{(args.FileFormat == FileFormat.Excel ? "xlsx" : "csv")}";
        await MessageBox.ShowLoading();
        await Task.Delay(10); // or spinner wont show
        AsyncResult<byte[]> fileContent = exporter.Export(args, vintages);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, fileContent.Result);

        // Save options as defaults
        AppState.UserSettings.ExportSettings.DataLayout = args.DataLayout;
        AppState.UserSettings.ExportSettings.FileFormat = args.FileFormat;
        AppState.UserSettings.ExportSettings.SortPriority = args.SortPriority;
        AppState.UserSettings.ExportSettings.ObsSortDirection = args.ObsSortDirection;
        AppState.UserSettings.ExportSettings.VintSortDirection = args.VintSortDirection;
        AppState.SaveUserSettings();
        
        await MessageBox.HideLoading();
    }
}

@inherits BasePage
<div >
    @if (series is not null && series.HasVintages.HasValue && series.HasVintages.Value)
    {
        <div id="pivot-container" style="max-height:600px;overflow:auto;">
            <LeaderPivot 
            @ref="leaderPivot"
            T="FredObsRecord" 
            DataSource="LoadObservations"
            Measures="Measures"
            Dimensions="Dimensions"
            DisplayGrandTotals="false"
            DisplayGrandTotalOption="true"
            DisplayDimensionButtons="true"
            DisplayMeasureSelectors="false"
            DisplayReloadDataButton="true"
            PivotStyle="SelectedPivotStyle"
            IsBusyChanged="IsBusyChanged">
            </LeaderPivot>
        </div>
    }
    else
    {
        <h3>This series cannot be displayed in a pivot table because all vintages are the same as the original releases.</h3>    
    }
</div>
@code {
    [Parameter] public FredSeries series { get; set; }
    [Parameter] public EventCallback<FredSeries> seriesChanged { get; set; }
    [Parameter] public EventCallback<IEnumerable<FredObservation>> obsChanged { get; set; }
    private LeaderPivot<FredObsRecord> leaderPivot { get; set; }

    private IEnumerable<FredObservation> _obs;
    [Parameter] public IEnumerable<FredObservation> obs 
    {
        get => _obs;
        set
        {
            if (_obs != value)
            {
                _obs = value;
                CreateObsRecords(_obs);
                leaderPivot?.ReloadData();
            }

        }
    }
    private List<Dimension<FredObsRecord>> Dimensions;
    private List<Measure<FredObsRecord>> Measures;
    private List<FredObsRecord> FredObsRecords;
    private LeaderPivotStyle SelectedPivotStyle;

    public ObsPivotTable()
    {
        SelectedPivotStyle = LeaderPivotStyles.Styles.First(x => x.StyleName == "Dark");
        SelectedPivotStyle.GroupHeaderCell += " groupHeaderNoWrap";
        Dimensions = new List<Dimension<FredObsRecord>>(4);
        Measures = new List<Measure<FredObsRecord>>(2);


        Dimensions.AddRange(new Dimension<FredObsRecord>[] {
            new Dimension<FredObsRecord>
            {
                DisplayValue = "Obs Date",
                GroupValue = x => x.obsDate,
                HeaderValue = x => x.obsDate,
                IsRow = true,
                IsExpanded = true,
                Sequence = 0,
                IsAscending = true,
                IsEnabled = true

            },


            new Dimension<FredObsRecord>
            {
                DisplayValue = "Vintage Date",
                GroupValue = x => x.vintageDate,
                HeaderValue = x => x.vintageDate,
                IsRow = false,
                IsExpanded = true,
                Sequence = 0,
                IsAscending = true,
                IsEnabled = true
            }});

        Measures.Add(new Measure<FredObsRecord> { Aggragate = x => x.Measure.Sum(y => y.value ?? 0), DisplayValue = "Value", Format = "{0:n3}", Sequence = 1, IsEnabled = true });
        

    }

    private void OnobsChanged(ChangeEventArgs e)
    {
        LoadObservations();
    }

    private async Task<IEnumerable<FredObsRecord>> LoadObservations()
    {
        return FredObsRecords;
    }

    private void CreateObsRecords(IEnumerable<FredObservation> obs)
    {
        if (obs is null)
            FredObsRecords = new();
        else
            FredObsRecords = obs
            .GroupBy(x => x.VintageDate)
            .OrderByDescending(x => x.Key)
            .Take(20)
            .SelectMany(x => x.OrderByDescending(y => y.ObsDate).Take(250))
            .Select(x => new FredObsRecord(x.VintageDate.ToString(Constants.DateFormat), x.ObsDate.ToString(Constants.DateFormat), x.Value)).ToList();
    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }
    private async Task IsBusyChanged(bool isBusy)
    {
        if (isBusy)
            await MessageBox.ShowLoading();
        else
            await MessageBox.HideLoading();

    }

    public class FredObsRecord
    {
        public string vintageDate { get; set; }
        public string obsDate { get; set; }
        public decimal? value { get; set; }


        public FredObsRecord(string vintageDate, string obsDate, decimal? value)
        {
            this.vintageDate = vintageDate;
            this.obsDate = obsDate;
            this.value = value;
        }    
    }
}

@inherits BasePage
<div >
    @if (series is not null && series.HasVintages.HasValue && series.HasVintages.Value)
    {
        <div id="pivot-container" style="max-height:600px;overflow:auto;">
            <LeaderPivot 
            @ref="leaderPivot"
            T="FredObservation" 
            DataSource="LoadObservations"
            Measures="Measures"
            Dimensions="Dimensions"
            DisplayGrandTotals="false"
            DisplayGrandTotalOption="true"
            DisplayDimensionButtons="true"
            DisplayMeasureSelectors="false"
            DisplayReloadDataButton="true"
            PivotStyle="SelectedPivotStyle">
            </LeaderPivot>
        </div>
    }
    else
    {
        <h3>This series cannot be displayed in a pivot table because all vintages are the same as the original releases.</h3>    
    }
</div>
@code {
    [Parameter] public FredSeries series { get; set; }
    [Parameter] public EventCallback<FredSeries> seriesChanged { get; set; }
    [Parameter] public EventCallback<IEnumerable<FredObservation>> obsChanged { get; set; }
    private IEnumerable<FredObservation> _obs;
    private LeaderPivot<FredObservation> leaderPivot { get; set; }
    [Parameter] public IEnumerable<FredObservation> obs 
    {
        get => _obs;
        set
        {
            if (_obs != value)
            {
                _obs = value;
                leaderPivot?.ReloadData();
            }

        }
    }
    private List<Dimension<FredObservation>> Dimensions;
    private List<Measure<FredObservation>> Measures;
    private LeaderPivotStyle SelectedPivotStyle;

    public ObsPivotTable()
    {
        SelectedPivotStyle = LeaderPivotStyles.Styles.First(x => x.StyleName == "Dark");
        SelectedPivotStyle.GroupHeaderCell += " groupHeaderNoWrap";
        Dimensions = new List<Dimension<FredObservation>>(4);
        Measures = new List<Measure<FredObservation>>(2);


        Dimensions.AddRange(new Dimension<FredObservation>[] {
            new Dimension<FredObservation>
            {
                DisplayValue = "Obs Date",
                GroupValue = x => x.ObsDate.ToString(Constants.DateFormat),
                HeaderValue = x => x.ObsDate.ToString(Constants.DateFormat),
                IsRow = true,
                IsExpanded = true,
                Sequence = 0,
                IsAscending = true,
                IsEnabled = true

            },


            new Dimension<FredObservation>
            {
                DisplayValue = "Vintage Date",
                GroupValue = x => x.VintageDate.ToString(Constants.DateFormat),
                HeaderValue = x => x.VintageDate.ToString(Constants.DateFormat),
                IsRow = false,
                IsExpanded = true,
                Sequence = 0,
                IsAscending = true,
                IsEnabled = true
            }});

        Measures.Add(new Measure<FredObservation> { Aggragate = x => x.Measure.Sum(y => y.Value ?? 0), DisplayValue = "Value", Format = "{0:n3}", Sequence = 1, IsEnabled = true });

    }

    private void OnobsChanged(ChangeEventArgs e)
    {
        LoadObservations();
    }

    private async Task<IEnumerable<FredObservation>> LoadObservations()
    {
        if (obs == null)
            return null;

        return obs;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadObservations();
    }
}

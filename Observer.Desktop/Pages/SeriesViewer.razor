@page "/seriesViewer"
@inherits SeriesViewBasePage
<AddSeries />
    <MudPaper Outlined="true" Class="d-flex mt-5 mb-5 pa-3 justify-end gap-8">
        <MudIconButton Title="Add Series" Size="Size.Large" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" @onclick="AddSeriesClickHandler"  />
        <MudIconButton Title="Update all series" Size="Size.Large" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" @onclick="UpdateAllSeriesClickHandler" Class="d-flex"></MudIconButton>
    <MudIconButton Title="Update selected series" Size="Size.Large" Icon="@Icons.Material.Filled.DownloadForOffline" Variant="Variant.Filled" @onclick="UpdateSelectedSeriesClickHandler" Disabled="selectedItems.Count == 0" Class="d-flex"></MudIconButton>
        <MudIconButton Title="Delete selected series" Size="Size.Large" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" @onclick="DeleteSeriesClickHandler" Disabled="selectedItems.Count == 0" Class="d-flex" ></MudIconButton>
    </MudPaper>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<FredSeries>>>(LoadSeries))"
          AllowUnsorted="false" Dense="true" Hover="true" MultiSelection="true" @bind-SelectedItems="selectedItems" @ref="seriesTable" FixedHeader="true" Height="calc(100vh - 300px)" RowsPerPage="100">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Local Series</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@OnSearch" Placeholder="Search" 
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.Symbol))" T="FredSeries">Symbol</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.Title))" T="FredSeries">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.Frequency))" T="FredSeries">Frequency</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.Units))" T="FredSeries">Units</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.SeasonalAdj))" T="FredSeries">Seasonal Adj</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@(nameof(FredSeries.LastObsCheck))" T="FredSeries">Last Obs Check</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Symbol">
                <MudLink href="@($"obsViewerTabs/{context.Symbol}/{context.Title}/S")">@context.Symbol</MudLink>
            </MudTd>
            <MudTd DataLabel="Title">
                <MudTooltip>
                        <ChildContent>@context.Title</ChildContent>
                    <TooltipContent>
                        <MudText>
                            <div style="display:flex;width:70vw;padding-left:10vw;text-align:left;">
                                    @context.Notes
                            </div>
                        </MudText>
                    </TooltipContent>
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="Frequency">@context.Frequency</MudTd>
            <MudTd DataLabel="Units">@context.Units</MudTd>
            <MudTd DataLabel="Seasonal Adj">@context.SeasonalAdj</MudTd>
            <MudTd DataLabel="Last Obs Check">@context.LastObsCheck.ToLocalTime()</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100, 200, 500, int.MaxValue }" InfoFormat="@($"{pagerFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
        </PagerContent>
    </MudTable>

@code {

    private MudTable<FredSeries> seriesTable;
    private string searchTitle;
    private HashSet<FredSeries> selectedItems { get; set; } = new HashSet<FredSeries>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async Task AddSeriesClickHandler()
    {
        if(await AddSeries())
            await seriesTable.ReloadServerData();
    }

    protected async Task UpdateAllSeriesClickHandler() 
    {
        if(await UpdateAllSeries())
            await seriesTable.ReloadServerData();
    }

    protected async Task UpdateSelectedSeriesClickHandler() 
    {
        IEnumerable<string>? selectedSymbols = selectedItems?.Select(x => x.Symbol);

        if(await UpdateSelectedSeries(selectedSymbols))
            await seriesTable.ReloadServerData();
    }

    protected async Task DeleteSeriesClickHandler()
    {
        IEnumerable<string>? selectedSymbols = selectedItems?.Select(x => x.Symbol);

        if(await DeleteSeries(selectedSymbols))
            await seriesTable.ReloadServerData();
    }

    private async Task<TableData<FredSeries>> LoadSeries(TableState tableState)
    {
        await MessageBox.ShowLoading();
        ViewState viewState = AppState.GetViewState(View.Series);
        viewState.SortExpression = tableState.SortLabel;
        viewState.SortAscending = tableState.SortDirection != SortDirection.Descending;
        viewState.Skip = tableState.Page * tableState.PageSize;
        viewState.Take = tableState.PageSize;
        viewState.SearchText = searchTitle;
        IEnumerable<FredSeries> series = await serviceClient.CallAsync(x => x.SeriesService.GetLocalSeries(null, searchTitle, viewState.SortExpression, viewState.SortAscending, viewState.Skip, viewState.Take));
        await MessageBox.HideLoading();
        return new TableData<FredSeries> { TotalItems = int.MaxValue, Items = series };
    }

    private void OnSearch(string text)
    {
        searchTitle = text;
        seriesTable.ReloadServerData();
    }
}

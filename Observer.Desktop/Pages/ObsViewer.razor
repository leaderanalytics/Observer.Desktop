@page "/obsViewer/{symbol}"
@inherits BasePage
<MudLayout>
    <MudPaper Outlined="true" Class="d-flex mt-5 mb-5 pa-3 justify-space-around">
        <MudLink href="@($"seriesViewer")">
            <ChildContent>
                <MudButton StartIcon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Filled" Color="Color.Default" Style="text-transform:none">Series</MudButton>
            </ChildContent>
        </MudLink>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Default" Style="text-transform:none">Excel</MudButton>
        <div class="d-flex justify-content-center align-content-center">
            <MudRadioGroup @bind-SelectedOption="@dense" Class="d-flex justify-content-center align-content-center">
                <MudRadio Color="Color.Primary" Option="@(true)">Dense</MudRadio>
                <MudRadio Color="Color.Primary" Option="@(false)">Sparse</MudRadio>
            </MudRadioGroup>
        </div>
    </MudPaper>
        <MudTabs Elevation="1" Rounded="true" PanelClass="pa-6">
            <MudTabPanel Text="List" ToolTip="List of observations" >
                <ObsList @bind-obs="obs" @bind-symbol="symbol" />
            </MudTabPanel>
            <MudTabPanel Text="Pivot Table" ToolTip="Matrix view of observations">
                <ObsPivotTable @bind-obs="obs" />
            </MudTabPanel>
            <MudTabPanel Text="Statistics" ToolTip="Summary information">
                <SeriesStats />
            </MudTabPanel>
        </MudTabs>
</MudLayout>


@code {

    [Parameter] public string symbol { get; set; }
    private bool dense { get; set; } = true;
    private IEnumerable<Observation> _obs { get; set; }
    private IEnumerable<Observation> obs 
    {
        get => _obs;
        set
        {
            if (_obs != value)
            {
                _obs = value;
                obsChanged.InvokeAsync();
            }

        }
    }
    public EventCallback<IEnumerable<Observation>> obsChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await MessageService.ShowLoading();
        await base.OnInitializedAsync();
        obs = (await serviceClient.CallAsync(x => x.ObservationsService.GetLocalObservations(new string[] { symbol }))).Item;
        //await MessageService.HideLoading();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
         
        }

    }
}
